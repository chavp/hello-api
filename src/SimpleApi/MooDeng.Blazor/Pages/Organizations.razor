@page "/"
@page "/organizations"
@inject IHttpClientFactory ClientFactory

@using System.Net.Http.Json
@using MooDeng.Parties.IServices.Dtos
@using MooDeng.Blazor.ViewModels

<h3>Organizations: Zoo</h3>
@if (!organizations.Any())
{
    <p><em>Loading...</em></p>
}
else
{
    <div>
        <button class="btn btn-primary" @onclick="AddOrg"><Icon Name="IconName.PlusSquare" /></button>
    </div>
    <table class="table table-striped table-hover">
        <thead>
            <tr>
                <th scope="col" hidden>Id</th>
                <th scope="col">Acts</th>
                <th scope="col">Code</th>
                <th scope="col">Name</th>
                <th scope="col">Role Type Code</th>
                <th scope="col">Role Effective</th>
                <th scope="col">Role Expiry</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var org in organizations)
            {
                <tr @onclick="@(() => Selected(org))">
                    <td hidden>@org.PartyId</td>
                    <td>
                        <Button Color="ButtonColor.Primary" @onclick="@org.Edit" hidden=@org.IsEditing><Icon Name="IconName.PencilSquare" /></Button>
                        <div class="btn-group" role="group" aria-label="Org Actions" hidden=@(!org.IsEditing)>
                            <button class="btn btn-success" @onclick=@(() => SaveOrg(org))><Icon Name="IconName.Save" /></button>
                            <button class="btn btn-danger" @onclick=@(() => org.Cancel(organizations))><Icon Name="IconName.XSquare" /></button>
                        </div>
                    </td>
                    <td><input class="form-control text-uppercase" @bind=@org.Code readonly=@(!org.IsEditing)></td>
                    <td><input class="form-control" @bind=@org.Name readonly=@(!org.IsEditing)></td>
                    <td>@org.PartyRole.TypeCode</td>
                    <td>@org.PartyRole.EffectiveDateTime.ToString("dd/MM/yyyy")</td>
                    <td>@org.PartyRole.ExpiryDateTime.ToString("dd/MM/yyyy")</td>
                </tr>
            }
        </tbody>
    </table>
}

@if (selectedOrg != null)
{
    <h4>Pets bring up by @selectedOrg!.Name</h4>
    <div>
        <button class="btn btn-primary" @onclick="AddPet"><Icon Name="IconName.PlusSquare" /></button>
    </div>
}

@if (animals.Any())
{
    <table class="table table-striped table-hover">
        <thead>
            <tr>
                <th scope="col" hidden>Id</th>
                <th scope="col">Acts</th>
                <th scope="col">Name</th>
                <th scope="col">Role</th>
                <th scope="col">Role Effective</th>
                <th scope="col">Role Expiry</th>
                <th scope="col">Relationship Role</th>
                <th scope="col">Relationship Role Effective</th>
                <th scope="col">Relationship Role Expiry</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in animals)
            {
                <tr>
                    <td hidden>@item.Id</td>
                    <td>
                        <Button Color="ButtonColor.Primary" @onclick="@item.Edit" hidden=@(item.IsEditing)><Icon Name="IconName.PencilSquare" /></Button>
                        <div class="btn-group" role="group" aria-label="Org Actions" hidden=@(!item.IsEditing)>
                            <button class="btn btn-success" @onclick=@(() => SaveParty(item))><Icon Name="IconName.Save" /></button>
                            <button class="btn btn-danger" @onclick=@(() => item.Cancel(animals))><Icon Name="IconName.XSquare" /></button>
                        </div>
                    </td>
                    <td><input class="form-control" @bind=@item.Name readonly=@(!item.IsEditing)></td>
                    <td>@item.PartyRole.TypeCode</td>
                    <td>@item.PartyRole.EffectiveDateTime.ToString("dd/MM/yyyy")</td>
                    <td>@item.PartyRole.ExpiryDateTime.ToString("dd/MM/yyyy")</td>
                    <td>@item.RelationshipParty.TypeCode</td>
                    <td>@item.RelationshipParty.EffectiveDateTime.ToString("dd/MM/yyyy")</td>
                    <td>@item.RelationshipParty.ExpiryDateTime.ToString("dd/MM/yyyy")</td>
                </tr>
            }
        </tbody>
    </table>
}
else
{
    <p><em>Not found</em></p>
}

<Modal IsServiceModal="true" />

@code {
    private List<OrganizationViewModel> organizations = new();

    private List<PartyViewModel>? animals = new();
    private OrganizationDto? selectedOrg;

    private string? errorAction = null;

    [Inject] ModalService ModalService { get; set; } = default!;

    private bool progressing = false;

    protected override async Task OnInitializedAsync()
    {
        var client = ClientFactory.CreateClient("MooDengApi");

        organizations = await client.GetFromJsonAsync<List<OrganizationViewModel>>("moodeng/zoos");

    }

    private async Task Selected(OrganizationDto org)
    {
        animals.Clear();
        selectedOrg = org;
        if (org.PartyId.HasValue)
        {
            var client = ClientFactory.CreateClient("MooDengApi");
            animals = await client.GetFromJsonAsync<List<PartyViewModel>>(
                $"moodeng/zoos/{org.PartyId}/bring-up");
        }

    }

    private async Task AddOrg()
    {
        organizations.Add(new OrganizationViewModel { IsEditing = true });
    }

    private async Task SaveOrg(OrganizationViewModel org)
    {
        var client = ClientFactory.CreateClient("MooDengApi");
        HttpResponseMessage resp = null;
        progressing = true;
        if (org.PartyId.HasValue)
        {
            resp = await client.PutAsJsonAsync<OrganizationInfoDto>($"moodeng/zoos/{org.PartyId}", new OrganizationInfoDto
            {
                Code = org.Code,
                Name = org.Name,
            });
        }
        else
        {
            resp = await client.PostAsJsonAsync<NewOrganizationInfoDto>($"moodeng/zoos", new NewOrganizationInfoDto
            {
                Organization = new OrganizationInfoDto
                {
                    Code = org.Code,
                    Name = org.Name,
                },
                Role = new TypeInfoDto
                {
                    TypeCode = org.PartyRole.TypeCode,
                    EffectiveDateTime = org.PartyRole.EffectiveDateTime,
                    ExpiryDateTime =  org.PartyRole.ExpiryDateTime,
                }
            });
            if (resp.IsSuccessStatusCode)
            {
                var data = await resp.Content.ReadFromJsonAsync<OrganizationDto>();
                org.PartyId = data.PartyId;
            }
            else
            {
                organizations.Remove(org);
            }
        }

        if (!resp.IsSuccessStatusCode)
        {
            var modalOption = new ModalOption
                {
                    Title = "Error! Save Organization",
                    Message = resp.ReasonPhrase,
                    Type = ModalType.Danger
                };

            await ModalService.ShowAsync(modalOption);
        }
        org.IsEditing = false;
        progressing = false;
    }

    private async Task SaveParty(PartyViewModel party)
    {
        var client = ClientFactory.CreateClient("MooDengApi");
        HttpResponseMessage resp = null;
        if (party.Id.HasValue)
        {
            resp = await client.PutAsJsonAsync<PartyInfoDto>($"moodeng/parties/{party.Id}", new PartyInfoDto
            {
                Name = party.Name,
            });
        }
        else
        {

        }

        if (!resp.IsSuccessStatusCode)
        {
            var modalOption = new ModalOption
                {
                    Title = "Error! Save Pet",
                    Message = resp.ReasonPhrase,
                    Type = ModalType.Danger
                };

            await ModalService.ShowAsync(modalOption);
        }
        party.IsEditing = false;
    }

    private async Task AddPet()
    {
        animals.Add(new PartyViewModel{ IsEditing = true });
    }
}
